/*
 * BrowseProducts.java
 *
 * Created on October 10, 2008, 9:10 AM
 */
package ui.CustomerRole;

import model.Car;
import model.CarCatalog;
//import ui.SupplierRole.ViewProductDetailJPanel;
import java.awt.CardLayout;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author Rushabh
 */
public class BrowseCarsJPanel extends javax.swing.JPanel {
    
    private JPanel userProcessContainer;
    private CarCatalog carCatalog;

    /** Creates new form BrowseProducts */
    public BrowseCarsJPanel(JPanel userProcessContainer, CarCatalog carCatalog) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.carCatalog=carCatalog;
        
        //set manufacturers
        setManufacturers();
    }

    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        btnFindCab = new javax.swing.JButton();
        btnTotalCars = new javax.swing.JButton();
        btnCarManufacturedBy = new javax.swing.JButton();
        jComboBoxManufacturerName = new javax.swing.JComboBox<>();
        lblListByManufacturer = new javax.swing.JLabel();
        lblListByManufacturingYear = new javax.swing.JLabel();
        txtYear = new javax.swing.JTextField();
        btnCarsManufacturingYear = new javax.swing.JButton();
        lblListAllCarsWithSeats1 = new javax.swing.JLabel();
        txtMinimumSeats = new javax.swing.JTextField();
        lblListAllCarsWithSeats2 = new javax.swing.JLabel();
        txtMaximumSeats = new javax.swing.JTextField();
        lblListAllCarsWithSeats3 = new javax.swing.JLabel();
        btnCarswithSeats = new javax.swing.JButton();
        lblListCarWithSerialNo = new javax.swing.JLabel();
        txtListCarWithSerialNo = new javax.swing.JTextField();
        btnCarSerialNo = new javax.swing.JButton();
        lblListCarWithModelNo = new javax.swing.JLabel();
        txtListCarWithModelNo = new javax.swing.JTextField();
        btnCarModelNo = new javax.swing.JButton();
        lblAllCarManufacturers = new javax.swing.JLabel();
        btnAllCarManufacturers = new javax.swing.JButton();
        lblCatalogUpdateTime = new javax.swing.JLabel();
        btnCatalogUpdateTime = new javax.swing.JButton();
        lblCarsAvailableInCity = new javax.swing.JLabel();
        btnCheckCarsInCity = new javax.swing.JButton();
        txtListCarInCity = new javax.swing.JTextField();
        btnTotalCars1 = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(650, 600));

        lblTitle.setBackground(new java.awt.Color(0, 0, 0));
        lblTitle.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(204, 0, 0));
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTitle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/logoPleaseBuySmall.png"))); // NOI18N
        lblTitle.setText("Menu                                     ");
        lblTitle.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        lblTitle.setIconTextGap(20);

        btnBack.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnFindCab.setText("Find cab");
        btnFindCab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindCabActionPerformed(evt);
            }
        });

        btnTotalCars.setText("Find total number of cars");
        btnTotalCars.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTotalCarsActionPerformed(evt);
            }
        });

        btnCarManufacturedBy.setText("Go");
        btnCarManufacturedBy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCarManufacturedByActionPerformed(evt);
            }
        });

        jComboBoxManufacturerName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxManufacturerNameActionPerformed(evt);
            }
        });

        lblListByManufacturer.setText("List all Cars Manufactured By-");

        lblListByManufacturingYear.setText("List all Cars Manufactured in Year-");

        txtYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtYearActionPerformed(evt);
            }
        });

        btnCarsManufacturingYear.setText("Go");
        btnCarsManufacturingYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCarsManufacturingYearActionPerformed(evt);
            }
        });

        lblListAllCarsWithSeats1.setText("List all Cars with minimum-");

        txtMinimumSeats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMinimumSeatsActionPerformed(evt);
            }
        });

        lblListAllCarsWithSeats2.setText("seats & not more than-");

        lblListAllCarsWithSeats3.setText("seats");

        btnCarswithSeats.setText("Go");
        btnCarswithSeats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCarswithSeatsActionPerformed(evt);
            }
        });

        lblListCarWithSerialNo.setText("List Car with given Serial no-");

        txtListCarWithSerialNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtListCarWithSerialNoActionPerformed(evt);
            }
        });

        btnCarSerialNo.setText("Go");
        btnCarSerialNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCarSerialNoActionPerformed(evt);
            }
        });

        lblListCarWithModelNo.setText("List Car with given Model no-");

        txtListCarWithModelNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtListCarWithModelNoActionPerformed(evt);
            }
        });

        btnCarModelNo.setText("Go");
        btnCarModelNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCarModelNoActionPerformed(evt);
            }
        });

        lblAllCarManufacturers.setText("List All Car manufacturers-");

        btnAllCarManufacturers.setText("Go");
        btnAllCarManufacturers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAllCarManufacturersActionPerformed(evt);
            }
        });

        lblCatalogUpdateTime.setText("Check Fleet Catalog Update Time");

        btnCatalogUpdateTime.setText("Go");
        btnCatalogUpdateTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCatalogUpdateTimeActionPerformed(evt);
            }
        });

        lblCarsAvailableInCity.setText("Check All cars available in");

        btnCheckCarsInCity.setText("Go");
        btnCheckCarsInCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckCarsInCityActionPerformed(evt);
            }
        });

        txtListCarInCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtListCarInCityActionPerformed(evt);
            }
        });

        btnTotalCars1.setText("Cars with expired maintanence certificate");
        btnTotalCars1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTotalCars1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(lblTitle))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(109, 109, 109)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnTotalCars)
                            .addComponent(btnFindCab)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblListByManufacturer)
                                    .addComponent(lblListByManufacturingYear))
                                .addGap(24, 24, 24)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jComboBoxManufacturerName, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnCarManufacturedBy))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtYear, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnCarsManufacturingYear))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblListAllCarsWithSeats1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtMinimumSeats, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblListAllCarsWithSeats2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtMaximumSeats, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblListAllCarsWithSeats3)
                                .addGap(18, 18, 18)
                                .addComponent(btnCarswithSeats))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblListCarWithSerialNo)
                                .addGap(18, 18, 18)
                                .addComponent(txtListCarWithSerialNo, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnCarSerialNo))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblListCarWithModelNo)
                                    .addComponent(lblAllCarManufacturers)
                                    .addComponent(lblCatalogUpdateTime)
                                    .addComponent(lblCarsAvailableInCity))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnAllCarManufacturers)
                                            .addComponent(txtListCarWithModelNo, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addComponent(btnCarModelNo))
                                    .addComponent(btnCatalogUpdateTime)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtListCarInCity, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnCheckCarsInCity))))
                            .addComponent(btnTotalCars1, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(178, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTitle)
                    .addComponent(btnBack))
                .addGap(65, 65, 65)
                .addComponent(btnFindCab)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnTotalCars)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCarManufacturedBy)
                    .addComponent(jComboBoxManufacturerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblListByManufacturer))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblListByManufacturingYear)
                    .addComponent(txtYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCarsManufacturingYear))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblListAllCarsWithSeats1)
                    .addComponent(txtMinimumSeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblListAllCarsWithSeats2)
                    .addComponent(txtMaximumSeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblListAllCarsWithSeats3)
                    .addComponent(btnCarswithSeats))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblListCarWithSerialNo)
                    .addComponent(txtListCarWithSerialNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCarSerialNo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblListCarWithModelNo)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtListCarWithModelNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCarModelNo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblAllCarManufacturers)
                            .addComponent(btnAllCarManufacturers))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCatalogUpdateTime)
                    .addComponent(btnCatalogUpdateTime))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCarsAvailableInCity)
                    .addComponent(btnCheckCarsInCity)
                    .addComponent(txtListCarInCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnTotalCars1)
                .addContainerGap(154, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
        
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnFindCabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindCabActionPerformed
        // TODO add your handling code here:
        Car c= findFirstAvailableCab();
        if(null!=c){
        ViewCarJPanel vc = new ViewCarJPanel(userProcessContainer, c);
        userProcessContainer.add("ViewCarJPanel", vc);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
        } else{
            JOptionPane.showMessageDialog(null, "There are no cabs available", "Info", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnFindCabActionPerformed

    private void btnTotalCarsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTotalCarsActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null, "Total No. of available cars are: " + carCatalog.getCarCatalog().size() , "Info", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnTotalCarsActionPerformed

    private void btnCarManufacturedByActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCarManufacturedByActionPerformed
         if(carCatalog.getCarCatalog().size()>0){
        List carsList = findAllCarsWithManufacturer(jComboBoxManufacturerName.getSelectedItem().toString());
        ViewCarByManufacturersJPanel vc = new ViewCarByManufacturersJPanel(userProcessContainer, carsList);
        userProcessContainer.add("ViewCarByManufacturersJPanel", vc);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
         } else{
             JOptionPane.showMessageDialog(null, "There are no cabs available", "Info", JOptionPane.INFORMATION_MESSAGE);
         }      
    }//GEN-LAST:event_btnCarManufacturedByActionPerformed

    private void jComboBoxManufacturerNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxManufacturerNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxManufacturerNameActionPerformed

    private void txtYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtYearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtYearActionPerformed

    private void btnCarsManufacturingYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCarsManufacturingYearActionPerformed
        // TODO add your handling code here:
        if(validateYear()){
        List carsList = findAllCarsWithManufacturingYear(txtYear.getText());
        if(carsList.size()>0){
        ViewCarByManufacturersJPanel vc = new ViewCarByManufacturersJPanel(userProcessContainer, carsList);
        userProcessContainer.add("ViewCarByManufacturersJPanel", vc);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
        }else{
            JOptionPane.showMessageDialog(null, "No cars found", "Info", JOptionPane.INFORMATION_MESSAGE);
        }
    }
    }//GEN-LAST:event_btnCarsManufacturingYearActionPerformed

    private void txtMinimumSeatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMinimumSeatsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMinimumSeatsActionPerformed

    private void btnCarswithSeatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCarswithSeatsActionPerformed
        // TODO add your handling code here:
        if(validateInputSeats()){
        List carsList = findAllCarsWithRequiredSeats(txtMinimumSeats.getText(), txtMaximumSeats.getText());
        if(carsList.size()>0){
        ViewCarByManufacturersJPanel vc = new ViewCarByManufacturersJPanel(userProcessContainer, carsList);
        userProcessContainer.add("ViewCarByManufacturersJPanel", vc);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
        } else{
            JOptionPane.showMessageDialog(null, "No cars found", "Info", JOptionPane.INFORMATION_MESSAGE);
        }
        }
    }//GEN-LAST:event_btnCarswithSeatsActionPerformed

    private void txtListCarWithSerialNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtListCarWithSerialNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtListCarWithSerialNoActionPerformed

    private void btnCarSerialNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCarSerialNoActionPerformed
        if(validateSerialNo()){
        Car car = findCarWithSerialNo(txtListCarWithSerialNo.getText());
        if(null!=car){
        ViewCarDetailJPanelCustomer vc = new ViewCarDetailJPanelCustomer(userProcessContainer, car);
        userProcessContainer.add("ViewSupplier", vc);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
        }else{
            JOptionPane.showMessageDialog(null, "Car with serail no not found", "Info", JOptionPane.INFORMATION_MESSAGE);
        }
        }
    }//GEN-LAST:event_btnCarSerialNoActionPerformed

    private void txtListCarWithModelNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtListCarWithModelNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtListCarWithModelNoActionPerformed

    private void btnCarModelNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCarModelNoActionPerformed
        // TODO add your handling code here:
        if(validateInputModelNo()){
        List carsList = findAllCarsWithModelNo(txtListCarWithModelNo.getText());
        if(carsList.size()>0){
        ViewCarByManufacturersJPanel vc = new ViewCarByManufacturersJPanel(userProcessContainer, carsList);
        userProcessContainer.add("ViewCarByManufacturersJPanel", vc);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
        }else{
            JOptionPane.showMessageDialog(null, "Car with model no not found", "Info", JOptionPane.INFORMATION_MESSAGE);
        }
        }
    }//GEN-LAST:event_btnCarModelNoActionPerformed

    private void btnAllCarManufacturersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAllCarManufacturersActionPerformed
        // TODO add your handling code here:
        String mfg= getAllManufacturers();
        if(!mfg.isEmpty()){
            JOptionPane.showMessageDialog(null, "Car manufacturer are:" + mfg , "Info", JOptionPane.INFORMATION_MESSAGE);
        } else{
            JOptionPane.showMessageDialog(null, "No manufacturers found" , "Info", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnAllCarManufacturersActionPerformed

    private void btnCatalogUpdateTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCatalogUpdateTimeActionPerformed
        // TODO add your handling code here:
        if(null!=getCatalogUpdatedTime()){
            JOptionPane.showMessageDialog(null, "Catalog updated Time is:" + getCatalogUpdatedTime() , "Info", JOptionPane.INFORMATION_MESSAGE);
        }else{
            JOptionPane.showMessageDialog(null, "Catalog has not been updated yet:", "Info", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnCatalogUpdateTimeActionPerformed

    private void btnCheckCarsInCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckCarsInCityActionPerformed
        // TODO add your handling code here:
        if(validateInputCity()){
        List carsList = findAllCarsInCity(txtListCarInCity.getText());
        if(carsList.size()>0){
        ViewCarByManufacturersJPanel vc = new ViewCarByManufacturersJPanel(userProcessContainer, carsList);
        userProcessContainer.add("ViewCarByManufacturersJPanel", vc);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
        } else{
            JOptionPane.showMessageDialog(null, "No cars available", "Info", JOptionPane.INFORMATION_MESSAGE);
        }
        }
    }//GEN-LAST:event_btnCheckCarsInCityActionPerformed

    private void txtListCarInCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtListCarInCityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtListCarInCityActionPerformed

    private void btnTotalCars1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTotalCars1ActionPerformed
        // TODO add your handling code here:
        List carsList = findAllCarsWithExpiredMaintenanceCertificate();
        if(carsList.size()>0){
        ViewCarByManufacturersJPanel vc = new ViewCarByManufacturersJPanel(userProcessContainer, carsList);
        userProcessContainer.add("ViewCarByManufacturersJPanel", vc);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
        } else{
            JOptionPane.showMessageDialog(null, "No cars with expired maintanence certificates", "Info", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnTotalCars1ActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAllCarManufacturers;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCarManufacturedBy;
    private javax.swing.JButton btnCarModelNo;
    private javax.swing.JButton btnCarSerialNo;
    private javax.swing.JButton btnCarsManufacturingYear;
    private javax.swing.JButton btnCarswithSeats;
    private javax.swing.JButton btnCatalogUpdateTime;
    private javax.swing.JButton btnCheckCarsInCity;
    private javax.swing.JButton btnFindCab;
    private javax.swing.JButton btnTotalCars;
    private javax.swing.JButton btnTotalCars1;
    private javax.swing.JComboBox<String> jComboBoxManufacturerName;
    private javax.swing.JLabel lblAllCarManufacturers;
    private javax.swing.JLabel lblCarsAvailableInCity;
    private javax.swing.JLabel lblCatalogUpdateTime;
    private javax.swing.JLabel lblListAllCarsWithSeats1;
    private javax.swing.JLabel lblListAllCarsWithSeats2;
    private javax.swing.JLabel lblListAllCarsWithSeats3;
    private javax.swing.JLabel lblListByManufacturer;
    private javax.swing.JLabel lblListByManufacturingYear;
    private javax.swing.JLabel lblListCarWithModelNo;
    private javax.swing.JLabel lblListCarWithSerialNo;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField txtListCarInCity;
    private javax.swing.JTextField txtListCarWithModelNo;
    private javax.swing.JTextField txtListCarWithSerialNo;
    private javax.swing.JTextField txtMaximumSeats;
    private javax.swing.JTextField txtMinimumSeats;
    private javax.swing.JTextField txtYear;
    // End of variables declaration//GEN-END:variables

    private void setManufacturers() {
        Set manufacturerList= new HashSet<String>();
        for(Car c: carCatalog.getCarCatalog()){
            manufacturerList.add(c.getManufacturer());
        }
        String[] s= new String[manufacturerList.size()];
        List<String> list = new ArrayList<String>(manufacturerList);
        
        for(int i=0; i< manufacturerList.size() ; i++){
            s[i]= list.get(i);
        }
        
        jComboBoxManufacturerName.setModel(new javax.swing.DefaultComboBoxModel<>(s));
    }

    private List findAllCarsWithManufacturer(String manufacturer) {
        List<Car> carsList= new ArrayList<Car>();
        for(Car c: carCatalog.getCarCatalog()){
            if(c.getManufacturer().equalsIgnoreCase(manufacturer)){
                carsList.add(c);
            }
        }
        return carsList;
    }

    private List findAllCarsWithManufacturingYear(String year) {
        List<Car> carsList= new ArrayList<Car>();
        for(Car c: carCatalog.getCarCatalog()){
            if(c.getManufacturingYear().equalsIgnoreCase(year)){
                carsList.add(c);
            }
        }
        return carsList;
    }

    private List findAllCarsWithRequiredSeats(String min, String max) {
        List<Car> carsList= new ArrayList<Car>();
        for(Car c: carCatalog.getCarCatalog()){
            if(Integer.parseInt(c.getNumberOfSeats())>= Integer.parseInt(min) && Integer.parseInt(c.getNumberOfSeats())<= Integer.parseInt(max)){
                carsList.add(c);
            }
        }
        return carsList;
    }

    private Car findCarWithSerialNo(String serialNo) {
        for(Car c: carCatalog.getCarCatalog()){
            if(c.getSerialNumber().equals(serialNo)){
                return c;
            }
        }
        return null;
    }

    private List findAllCarsWithModelNo(String modelNo) {
        List<Car> carsList= new ArrayList<Car>();
        for(Car c: carCatalog.getCarCatalog()){
            if(c.getModelNumber().equalsIgnoreCase(modelNo)){
                carsList.add(c);
            }
        }
        return carsList;
    }
    
    private String getAllManufacturers() {
        StringBuilder finalString = new StringBuilder();
        Set manufacturerList= new HashSet<String>();
        for(Car c: carCatalog.getCarCatalog()){
            manufacturerList.add(c.getManufacturer());
        }
        String[] s= new String[manufacturerList.size()];
        List<String> list = new ArrayList<String>(manufacturerList);
        
        for(int i=0; i< manufacturerList.size() ; i++){
            finalString.append(list.get(i)).append(",");
        }
        if(list.size()>0){
        finalString.deleteCharAt(finalString.length()-1);
        }
        
        return finalString.toString();
    }

    private String getCatalogUpdatedTime() {
        return carCatalog.getCatalogeUpdatedDateTime();
    }

    private List findAllCarsInCity(String city) {
        List<Car> carsList= new ArrayList<Car>();
        for(Car c: carCatalog.getCarCatalog()){
            if(c.getCity().equalsIgnoreCase(city)){
                carsList.add(c);
            }
        }
        return carsList;
    }
    
    private List findAllCarsWithExpiredMaintenanceCertificate() {
        List<Car> carsList= new ArrayList<Car>();
        for(Car c: carCatalog.getCarCatalog()){
            if(checkExpiry(c)){
                carsList.add(c);
            }
            }
        return carsList;
        }

    private boolean checkExpiry(Car c) {
        LocalDateTime now = LocalDateTime.now();
        int year = now.getYear();
        int month = now.getMonthValue();
        int day = now.getDayOfMonth();
        
        String carExpiryDate= c.getMaintenanceCertificate();
        String[] result = carExpiryDate.split("/");
        int expYear = Integer.parseInt(result[2]);
        int expMonth = Integer.parseInt(result[0]);
        int expDay = Integer.parseInt(result[1]);
        
        if(expYear<year){
            return true;
        } else{
            if(year==expYear){
                if(expMonth<month){
                    return true;
                }else{
                    if(expDay<day){
                        return true;
                    }else{
                        return false;
                    }
                    }
                }
        }       
        return false;
    }   

    private boolean validateYear() {
        if(txtYear.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Invalid input year", "Info", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
        if(txtYear.getText().length()!=4 || checkIfCharsPresent(txtYear.getText())){
            JOptionPane.showMessageDialog(null, "Invalid input year", "Info", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
        return true;
    }
    
    public boolean checkIfDigitsPresent(String s){
        for (char c : s.toCharArray()) {
                if (Character.isDigit(c)) {
                     return true;
                }              
            }
        return false;
    }
       
    public boolean checkIfCharsPresent(String s){
        for (char c : s.toCharArray()) {
                if (!Character.isDigit(c)) {
                     return true;
                }              
            }
        return false;
    }

    private boolean validateInputSeats() {
        if(txtMinimumSeats.getText().isEmpty() || txtMaximumSeats.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Invalid input seats", "Info", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
        if(checkIfCharsPresent(txtMinimumSeats.getText()) || checkIfCharsPresent(txtMaximumSeats.getText())){
             JOptionPane.showMessageDialog(null, "Invalid input seats", "Info", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
        if(Integer.valueOf(txtMinimumSeats.getText()) <0 || Integer.valueOf(txtMinimumSeats.getText())> 999){
             JOptionPane.showMessageDialog(null, "Invalid input seats", "Info", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
        if(Integer.valueOf(txtMaximumSeats.getText()) <0 || Integer.valueOf(txtMaximumSeats.getText())> 999){
             JOptionPane.showMessageDialog(null, "Invalid input seats", "Info", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
        if(Integer.valueOf(txtMinimumSeats.getText()) > Integer.valueOf(txtMaximumSeats.getText())){
             JOptionPane.showMessageDialog(null, "Invalid input seats", "Info", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
        return true;
    }

    private boolean validateInputCity() {
        if(txtListCarInCity.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Invalid input city", "Info", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
        if(txtListCarInCity.getText().length()>15 || checkIfDigitsPresent(txtListCarInCity.getText())){
            JOptionPane.showMessageDialog(null, "Invalid input city", "Info", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
        return true;
    }

    private boolean validateInputModelNo() {
        if(txtListCarWithModelNo.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Invalid input model no", "Info", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
        
        if(txtListCarWithModelNo.getText().length()>25){
            JOptionPane.showMessageDialog(null, "Invalid input model no", "Info", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }     
        return true;
    }
    
    private boolean validateSerialNo() {
        if(txtListCarWithSerialNo.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Invalid input serial no", "Info", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
        
        if(txtListCarWithSerialNo.getText().length()>25){
            JOptionPane.showMessageDialog(null, "Invalid input serial no", "Info", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }     
        return true;
    }

    private Car findFirstAvailableCab() {
        for(Car c: carCatalog.getCarCatalog()){
            if(c.getAvailability().equals("true") &&  Integer. parseInt(c.getNumberOfSeats())>0){
                return c;
            }
        }
        return null;
        
    }


}
