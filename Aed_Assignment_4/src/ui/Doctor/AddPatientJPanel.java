package ui.Doctor;

import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import model.Patient;
import model.Person;
import model.Residence;
import model.SystemCatalog;
import model.VitalSignRecord;
import ui.Doctor.CreateVitalSignJPanel;


/**
 *
 * @author Mihir Mehta / Hechen Gao
 */
public class AddPatientJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private SystemCatalog personCatalog;
    //Person p = new Person();
    Patient p = new Patient();
    
    public AddPatientJPanel(JPanel upc, SystemCatalog personCatalog) {
        initComponents();
        userProcessContainer = upc;
        this.personCatalog = personCatalog;
         p.setVitalSignsHistory(new ArrayList<VitalSignRecord>());
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblNewPatientInformation = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        lblAddress = new javax.swing.JLabel();
        lblCity = new javax.swing.JLabel();
        txtAddress = new javax.swing.JTextField();
        txtCity = new javax.swing.JTextField();
        btnCreateVitalSign = new javax.swing.JButton();
        lblAge = new javax.swing.JLabel();
        txtAge = new javax.swing.JTextField();
        lblAge1 = new javax.swing.JLabel();
        jComboGender = new javax.swing.JComboBox<>();

        lblNewPatientInformation.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblNewPatientInformation.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblNewPatientInformation.setText("New Patient Information");

        lblName.setText("Name*:");

        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblAddress.setText("Address:");

        lblCity.setText("City:");

        btnCreateVitalSign.setText("Create Vital Sign *");
        btnCreateVitalSign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateVitalSignActionPerformed(evt);
            }
        });

        lblAge.setText("Age:");

        lblAge1.setText("Gender*:");

        jComboGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select","Male", "Female"}));
        jComboGender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboGenderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(btnBack))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(146, 146, 146)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblAddress)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblName)
                                        .addGap(1, 1, 1))
                                    .addComponent(lblCity)
                                    .addComponent(lblAge)
                                    .addComponent(lblAge1))
                                .addGap(97, 97, 97)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtName)
                                    .addComponent(txtCity)
                                    .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(73, 73, 73)
                                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(108, 108, 108)
                        .addComponent(lblNewPatientInformation, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(193, 193, 193)
                        .addComponent(btnCreateVitalSign, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(143, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(btnBack)
                .addGap(38, 38, 38)
                .addComponent(lblNewPatientInformation)
                .addGap(76, 76, 76)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAddress)
                    .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCity)
                    .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAge)
                    .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAge1)
                    .addComponent(jComboGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(btnCreateVitalSign)
                .addGap(39, 39, 39)
                .addComponent(btnAdd)
                .addContainerGap(140, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

        boolean availability=false;
       
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed

        if(validateMandatoryFields()){
  
        //logic to add patient details

        p.setName(txtName.getText());
        
        Residence r= new Residence();
        r.setAddress(txtAddress.getText());
        r.setCity(txtCity.getText());
        //p.setAddress(txtAddress.getText());
        //p.setCity(txtCity.getText());
        p.setResidence(r);
        p.setAge(txtAge.getText());
        
        
        p.setGender((String)jComboGender.getSelectedItem());
                
        
        personCatalog.getPatientCatalog().add(p);
        JOptionPane.showMessageDialog(null, "Patient added successfully!!", "Info", JOptionPane.INFORMATION_MESSAGE);    
        
        //clear form
        txtName.setText("");
        txtAddress.setText("");
        txtCity.setText("");
        txtAge.setText("");
        jComboGender.setSelectedIndex(0);

        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed

        backAction();
    }//GEN-LAST:event_btnBackActionPerformed

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameActionPerformed

    private void btnCreateVitalSignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateVitalSignActionPerformed
        // TODO add your handling code here:
        CreateVitalSignJPanel createVitalSignJPanel= new CreateVitalSignJPanel(p);
        createVitalSignJPanel.setBounds(0, 0, 400, 450);
        createVitalSignJPanel.setBackground(Color.WHITE);
        JOptionPane jop = new JOptionPane();
        JDialog dialog = jop.createDialog("My Dialog");         //Creating new dialog box to show service record panel
        dialog.setSize(400, 450);
        dialog.setLocation(150, 100);
        dialog.setContentPane(createVitalSignJPanel);
        dialog.setVisible(true);
    }//GEN-LAST:event_btnCreateVitalSignActionPerformed

    private void jComboGenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboGenderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboGenderActionPerformed

    private void backAction(){
        userProcessContainer.remove(this);
        Component [] componentArray = userProcessContainer.getComponents();
        Component c = componentArray[componentArray.length-1];
        ManagePatientJPanel ms = (ManagePatientJPanel) c;
        ms.refreshTable();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCreateVitalSign;
    private javax.swing.JComboBox<String> jComboGender;
    private javax.swing.JLabel lblAddress;
    private javax.swing.JLabel lblAge;
    private javax.swing.JLabel lblAge1;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblNewPatientInformation;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables

    private boolean validateMandatoryFields() {
        
        if(checkSpecialCharacters(txtName.getText()) || checkSpecialCharacters(txtCity.getText()) || checkSpecialCharacters(txtAge.getText()) ){
            JOptionPane.showMessageDialog(null, "Special characters not allowed", "Info", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
        
        
        if(txtName.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Fields with * are mandatory", "Info", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
        
        if(txtName.getText().length()>25 || txtAddress.getText().length()>25 || txtCity.getText().length()>25){
            JOptionPane.showMessageDialog(null, "Nmae, Address & City can have max 25 characters", "Info", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
        
        if(txtAge.getText().length()>2 || checkIfCharsPresent(txtAge.getText())){
            JOptionPane.showMessageDialog(null, "Invalid age", "Info", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
         
        if(checkIfDigitsPresent(txtName.getText())){
            JOptionPane.showMessageDialog(null, "Invalid name", "Info", JOptionPane.INFORMATION_MESSAGE);
            return false;
        } 
        
        if(checkDuplicatePersonName()){
            JOptionPane.showMessageDialog(null, "Duplicate person name found, cannot add", "Info", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
        
        if(checkIfDigitsPresent(txtCity.getText())){
            JOptionPane.showMessageDialog(null, "Invalid city", "Info", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
        
        if(((String)jComboGender.getSelectedItem()).equals("Select")){
            JOptionPane.showMessageDialog(null, "Please select gender", "Info", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
        
        if(p.getVitalSignsHistory()==null){
            JOptionPane.showMessageDialog(null, "Please add vital sign", "Info", JOptionPane.INFORMATION_MESSAGE);
            return false;
        }
        if(p.getVitalSignsHistory()!=null){
            if(p.getVitalSignsHistory().isEmpty()){
            JOptionPane.showMessageDialog(null, "Please add vital sign", "Info", JOptionPane.INFORMATION_MESSAGE);
            return false;

            }
        }
        
        return true;
    }

    private boolean checkDuplicatePersonName() {
        for(Person p: personCatalog.getPersonCatalog()){
            if(p.getName().equalsIgnoreCase(txtName.getText())){
                return true;
            }
        }
        return false;
    }
    
    public boolean checkIfDigitsPresent(String s){
        for (char c : s.toCharArray()) {
                if (Character.isDigit(c)) {
                     return true;
                }              
            }
        return false;
    }
       
    public boolean checkIfCharsPresent(String s){
        for (char c : s.toCharArray()) {
                if (!Character.isDigit(c)) {
                     return true;
                }              
            }
        return false;
    }
    public boolean checkSpecialCharacters(String s){
        Pattern special = Pattern.compile ("[!@#$%&*()_+=|<>?{}\\[\\]~-]");
        Matcher hasSpecial = special.matcher(s);
        return hasSpecial.find();
    } 

}
